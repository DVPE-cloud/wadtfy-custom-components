# Crossplane Composition linking the XRD with the concrete managed EFS Network resource.
# See https://negz.github.io/crossplane.github.io/docs/v1.4/reference/composition.html#compositions for details

apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: tenant-filesystem
  labels:
    version: "{{ regexReplaceAll "^([0-9]+\\.[0-9]+).*" .Chart.Version "${1}" }}"
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  compositeTypeRef:
    apiVersion: wadtfy.bmwgroup.net/v1beta1
    kind: XTenantFilesystem
  mode: Pipeline
  pipeline:
  - step: environmentConfigs
    functionRef:
      name: function-environment-configs
    input:
      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
      kind: Input
      spec:
        environmentConfigs:
          - type: Reference
            ref:
              name: wadtfy-env
          - type: Selector
            selector:
              matchLabels:
                - type: Value
                  key: "category"
                  value: "wadtfy-tenant"
                - type: FromCompositeFieldPath
                  key: "namespace"
                  valueFromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"

  - step: transfer-environmentconfig-variables
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
{{- `
          ---
          apiVersion: {{ .observed.composite.resource.apiVersion }}
          kind: {{ .observed.composite.resource.kind }}
          status:
            env:
              product: {{ index .context "apiextensions.crossplane.io/environment" "product" | toYaml }}
              iamOidcProviderId: {{ index .context "apiextensions.crossplane.io/environment" "iamOidcProviderId" | toYaml }}
              awsAccountId: {{ index .context "apiextensions.crossplane.io/environment" "awsAccountId" | toYaml }}
              providerConfig: {{ index .context "apiextensions.crossplane.io/environment" "providerConfig" | toYaml }}
              providerConfigKubernetes: {{ index .context "apiextensions.crossplane.io/environment" "providerConfigKubernetes" | toYaml }}
              eksCsiDriverServiceAccount: {{ index .context "apiextensions.crossplane.io/environment" "eksCsiDriverServiceAccount" | toYaml }}
              awsRegion: {{ index .context "apiextensions.crossplane.io/environment" "awsRegion" | toYaml }}
              eksAccountID: {{ index .context "apiextensions.crossplane.io/environment" "eksAccountID" | toYaml }}
              eksCidrIp: {{ index .context "apiextensions.crossplane.io/environment" "eksCidrIp" | toYaml }}
`}}

  - step: patch-and-transform
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources

      patchSets:
        # release patch set
        - name: "release-namespace"
          patches:
            - type: FromCompositeFieldPath
              fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
              toFieldPath: spec.forProvider.namespace

        - name: "metadata"
          patches:
            - type: CombineFromComposite
              combine:
                variables:
                  - fromFieldPath: "status.env.product"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-name]"
                strategy: string
                string:
                  fmt: "%s-%s-%s"
              toFieldPath: metadata.name
              policy:
                fromFieldPath: Required

        - name: "component-name"
          patches:
            - type: CombineFromComposite
              combine:
                variables:
                  - fromFieldPath: "status.env.product"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-name]"
                strategy: string
                string:
                  fmt: "%s-%s-%s"
              toFieldPath: spec.forProvider.values.components.global.name
              policy:
                fromFieldPath: Required

        - name: "tags"
          patches:
            - type: FromCompositeFieldPath
              fromFieldPath: "metadata.name"
              toFieldPath: "spec.forProvider.tags[2].tagValue"

            - type: FromCompositeFieldPath
              fromFieldPath: "status.env.eksAccountID"
              toFieldPath: "spec.forProvider.tags[3].tagValue"
              transforms:
                - type: convert
                  convert:
                    toType: string
            - type: FromCompositeFieldPath
              fromFieldPath: "status.env.product"
              toFieldPath: "spec.forProvider.tags[4].tagValue"

        # This patchset is used for Crossplane CRD's which does not use tagValues
        - name: "tagsV2"
          patches:
          - type: FromCompositeFieldPath
            fromFieldPath: "metadata.name"
            toFieldPath: "spec.forProvider.tags[2].value"

          - type: FromEnvironmentFieldPath
            fromFieldPath: "status.env.eksAccountID"
            toFieldPath: "spec.forProvider.tags[3].value"
            transforms:
              - type: convert
                convert:
                  toType: string

          - type: FromCompositeFieldPath
            fromFieldPath: "status.env.product"
            toFieldPath: "spec.forProvider.tags[4].value"


        - name: "deletionPolicy"
          patches:
            - type: FromCompositeFieldPath
              fromFieldPath: "deletionPolicy"
              toFieldPath: "spec.deletionPolicy"

        - name: "providerConfigRef"
          patches:
            - type: FromCompositeFieldPath
              fromFieldPath: "status.env.providerConfig"
              toFieldPath: "spec.providerConfigRef.name"
              policy:
                fromFieldPath: Required

        - name: "providerConfigKubernetes"
          patches:
            - type: FromCompositeFieldPath
              fromFieldPath: "status.env.providerConfigKubernetes"
              toFieldPath: "spec.providerConfigRef.name"

      resources:

        # The Key Policy maybe needs to better restrict the access
        - name: aws-kms-key
          base:
            apiVersion: kms.aws.crossplane.io/v1alpha1
            kind: Key
            metadata:
              name:
              labels:
                crossplane/xrd-kind: xtenantfilesystem.wadtfy.bmwgroup.net
                crossplane/xrd-helm_chart_version: {{ .Chart.Version }}
            spec:
              deletionPolicy: Delete
              forProvider:
                tags:
                  - tagKey: "wadtfy.bmwgroup.net/xrd-type"
                    tagValue: "XTenantFileSystem"
                  - tagKey: "wadtfy.bmwgroup.net/xrd-version"
                    tagValue: "v1alpha1"
                  - tagKey: "wadtfy.bmwgroup.net/component-name"
                    tagValue: ""
                  - tagKey: "wadtfy.bmwgroup.net/cluster-account-id"
                    tagValue: ""
                  - tagKey: "wadtfy.bmwgroup.net/product-name"
                    tagValue: ""
                enableKeyRotation: true
                enabled: true
                policy: ""
                region: ""
              providerConfigRef:
                name: ""

          patches:
            - type: PatchSet
              patchSetName: "metadata"
            - type: PatchSet
              patchSetName: "providerConfigRef"
            - type: PatchSet
              patchSetName: "tags"
            - type: PatchSet
              patchSetName: "deletionPolicy"

            - type: FromEnvironmentFieldPath
              fromFieldPath: "awsAccountId"
              toFieldPath: "spec.forProvider.policy"
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: |
                      {
                        "Version": "2012-10-17",
                        "Id": "key-policy",
                        "Statement": [
                          {
                            "Sid": "Enable IAM User Permissions",
                            "Effect": "Allow",
                            "Principal": {
                              "AWS": "arn:aws:iam::%s:root"
                            },
                            "Action": "kms:*",
                            "Resource": "*"
                          }
                        ]
                      }

            - type: FromCompositeFieldPath
              fromFieldPath: "spec.region"
              toFieldPath: "spec.forProvider.region"

            - type: ToCompositeFieldPath
              fromFieldPath: "metadata.name"
              toFieldPath: "status.kmsKeyRefName"

            - type: ToCompositeFieldPath
              fromFieldPath: "metadata.labels[crossplane.io/claim-name]"
              toFieldPath: "status.env.claimName"

            - type: ToCompositeFieldPath
              fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
              toFieldPath: "status.env.claimNamespace"

        - name: aws-elasticfilesystem
          base:
            apiVersion: efs.aws.crossplane.io/v1alpha1
            kind: FileSystem
            metadata:
              annotations:
                crossplane.io/composition-resource-name: "efs"
              labels:
                crossplane/xrd-kind: xtenantfilesystem.wadtfy.bmwgroup.net
                crossplane/xrd-helm_chart_version: {{ .Chart.Version }}
            spec:
              deletionPolicy: Delete
              forProvider:
                tags:
                  - key: "wadtfy.bmwgroup.net/xrd-type"
                    value: "XTenantFileSystem"
                  - key: "wadtfy.bmwgroup.net/xrd-version"
                    value: "v1alpha1"
                  - key: "wadtfy.bmwgroup.net/component-name"
                    value: ""
                  - key: "wadtfy.bmwgroup.net/cluster-account-id"
                    value: ""
                  - key: "wadtfy.bmwgroup.net/product-name"
                    value: ""
                encrypted: true
                kmsKeyIdRef:
                  name: ""
                performanceMode: ""
                throughputMode: ""
                region: ""
              providerConfigRef:
                name: ""
          patches:
            - type: PatchSet
              patchSetName: "metadata"
            - type: PatchSet
              patchSetName: "providerConfigRef"
            - type: PatchSet
              patchSetName: "tagsV2"
            - type: PatchSet
              patchSetName: "deletionPolicy"
            - type: FromCompositeFieldPath
              fromFieldPath: "spec.region"
              toFieldPath: "spec.forProvider.region"
            - type: FromCompositeFieldPath
              fromFieldPath: "status.kmsKeyRefName"
              toFieldPath: "spec.forProvider.kmsKeyIdRef.name"
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: "spec.efsPerformanceMode"
              toFieldPath: "spec.forProvider.performanceMode"
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: "spec.efsThroughputMode"
              toFieldPath: "spec.forProvider.throughputMode"
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: "spec.efsProvisionedThroughputInMibps"
              toFieldPath: "spec.forProvider.provisionedThroughputInMibps"
            - type: ToCompositeFieldPath
              fromFieldPath: "metadata.name"
              toFieldPath: "status.fileSystemRef"
            - type: ToCompositeFieldPath
              fromFieldPath: "status.atProvider.fileSystemID"
              toFieldPath: "status.fileSystemID"

        # The aws-iam-assume-role is required for the CSI Driver to assume the role.
        # It is not possible to assume an remote Role with AssumeRoleWithWebIdentity Trustrelation if the source already assumed locally an Role with AssumeRoleWithWebIdentity.
        # TLDR: Assume Role from IRSA to remote IRSA Role does not work in AWS (Status 2023/03/31)
        - name: aws-iam-assume-role
          base:
            apiVersion: iam.aws.crossplane.io/v1beta1
            kind: Role
            metadata:
              labels:
                crossplane/xrd-kind: xtenantfilesystem.wadtfy.bmwgroup.net
                crossplane/xrd-helm_chart_version: {{ .Chart.Version }}
            spec:
              deletionPolicy: Delete
              forProvider:
                path: "/wadtfy/tenantfilesystem/"
                tags:
                  - key: "wadtfy.bmwgroup.net/xrd-type"
                    value: "XTenantFileSystem"
                  - key: "wadtfy.bmwgroup.net/xrd-version"
                    value: "v1alpha1"
                  - key: "wadtfy.bmwgroup.net/component-name"
                    value: ""
                  - key: "wadtfy.bmwgroup.net/cluster-account-id"
                    value: ""
                  - key: "wadtfy.bmwgroup.net/product-name"
                    value: ""
                assumeRolePolicyDocument: ""
                description: IAM Trust Role
              providerConfigRef:
                name: ""
          patches:
            - type: PatchSet
              patchSetName: "metadata"
            - type: PatchSet
              patchSetName: "providerConfigRef"
            - type: PatchSet
              patchSetName: "tagsV2"
            - type: PatchSet
              patchSetName: "deletionPolicy"
            - type: ToCompositeFieldPath
              fromFieldPath: "metadata.name"
              toFieldPath: "status.roleName"
            - type: FromCompositeFieldPath
              fromFieldPath: "status.env.eksAccountID"
              toFieldPath: "spec.forProvider.assumeRolePolicyDocument"
              transforms:
                - type: convert
                  convert:
                    toType: string
                - type: string
                  string:
                    type: Format
                    fmt: |
                      {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "AWS": "arn:aws:iam::%s:root"
                            },
                            "Action": "sts:AssumeRole",
                            "Condition": {}
                          }
                        ]
                      }

        - name: aws-policy
          base:
            apiVersion: iam.aws.crossplane.io/v1beta1
            kind: Policy
            metadata:
              labels:
                crossplane/xrd-kind: xtenantfilesystem.wadtfy.bmwgroup.net
                crossplane/xrd-helm_chart_version: {{ .Chart.Version }}
            spec:
              deletionPolicy: Delete
              forProvider:
                tags:
                  - key: "wadtfy.bmwgroup.net/xrd-type"
                    value: "XTenantFileSystem"
                  - key: "wadtfy.bmwgroup.net/xrd-version"
                    value: "v1alpha1"
                  - key: "wadtfy.bmwgroup.net/component-name"
                    value: ""
                  - key: "wadtfy.bmwgroup.net/cluster-account-id"
                    value: ""
                  - key: "wadtfy.bmwgroup.net/product-name"
                    value: ""
                document: ""
                name:
              providerConfigRef:
                name: ""
          patches:
            - type: PatchSet
              patchSetName: "metadata"
            - type: PatchSet
              patchSetName: "providerConfigRef"
            - type: PatchSet
              patchSetName: "tagsV2"
            - type: PatchSet
              patchSetName: "deletionPolicy"
            - type: CombineFromComposite
              combine:
                variables:
                  - fromFieldPath: "status.env.product"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-name]"
                strategy: string
                string:
                  fmt: "efs-%s-%s-%s"
              toFieldPath: "spec.forProvider.name"

            - type: CombineFromComposite
              combine:
                variables:
                  - fromFieldPath: "status.env.awsRegion"
                  - fromFieldPath: "status.env.awsAccountId"
                  - fromFieldPath: "status.fileSystemID"
                strategy: string
                string:
                  fmt: |
                    {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Sid" : "Stmt1DescribeMountTargets",
                          "Effect": "Allow",
                          "Action": [
                            "elasticfilesystem:DescribeAccessPoints",
                            "elasticfilesystem:DescribeFileSystems",
                            "elasticfilesystem:DescribeMountTargets",
                            "elasticfilesystem:CreateAccessPoint",
                            "elasticfilesystem:TagResource"
                          ],
                          "Resource": "arn:aws:elasticfilesystem:%s:%s:file-system/%s"
                        },
                        {
                          "Sid" : "Stmt2AdditionalEC2PermissionsToDescribeMountTarget",
                          "Effect": "Allow",
                          "Action": [
                            "ec2:DescribeSubnets",
                            "ec2:DescribeNetworkInterfaces"
                          ],
                          "Resource": "*"
                        },
                        {
                          "Sid" : "Stmt3DeleteAccessPoint",
                          "Effect": "Allow",
                          "Action": "elasticfilesystem:DeleteAccessPoint",
                          "Resource": "*"
                        }
                      ]
                    }
              toFieldPath: "spec.forProvider.document"
              policy:
                fromFieldPath: Required
            - type: ToCompositeFieldPath
              fromFieldPath: "metadata.name"
              toFieldPath: "status.policyName"

        - name: aws-role-policy-attach
          base:
            apiVersion: iam.aws.crossplane.io/v1beta1
            kind: RolePolicyAttachment
            metadata:
              labels:
                crossplane/xrd-kind: xtenantfilesystem.wadtfy.bmwgroup.net
                crossplane/xrd-helm_chart_version: {{ .Chart.Version }}
            spec:
              deletionPolicy: Delete
              forProvider:
                policyArnRef:
                  name: ""
                roleNameRef:
                  name: ""
              providerConfigRef:
                name: ""
          patches:
            - type: PatchSet
              patchSetName: "metadata"
            - type: PatchSet
              patchSetName: "providerConfigRef"
            - type: PatchSet
              patchSetName: "deletionPolicy"
            - type: FromCompositeFieldPath
              fromFieldPath: "status.roleName"
              toFieldPath: "spec.forProvider.roleNameRef.name"
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: "status.policyName"
              toFieldPath: "spec.forProvider.policyArnRef.name"
              policy:
                fromFieldPath: Required
            # no tags available in RolePolicyAttachment CRD (Status: 2023-03-31)

        - name: aws-efs-securitygroup
          base:
            apiVersion: ec2.aws.crossplane.io/v1beta1
            kind: SecurityGroup
            metadata:
              annotations:
                crossplane.io/composition-resource-name: securitygroup
              labels:
                crossplane/xrd-kind: xtenantfilesystem.wadtfy.bmwgroup.net
                crossplane/xrd-helm_chart_version: {{ .Chart.Version }}
            spec:
              deletionPolicy: Delete
              forProvider:
                tags:
                  - key: "wadtfy.bmwgroup.net/xrd-type"
                    value: "XTenantFileSystem"
                  - key: "wadtfy.bmwgroup.net/xrd-version"
                    value: "v1alpha1"
                  - key: "wadtfy.bmwgroup.net/component-name"
                    value: ""
                  - key: "wadtfy.bmwgroup.net/cluster-account-id"
                    value: ""
                  - key: "wadtfy.bmwgroup.net/product-name"
                    value: ""
                description: Tenant StorageClass for EFS
                groupName: ""
                ingress:
                  - fromPort: 2049
                    ipProtocol: tcp
                    ipRanges:
                      - cidrIp: ""
                    toPort: 2049
                region: ""
                vpcId: ""
              providerConfigRef:
                name: ""
          patches:
            - type: PatchSet
              patchSetName: "metadata"
            - type: PatchSet
              patchSetName: "providerConfigRef"
            - type: PatchSet
              patchSetName: "tagsV2"
            - type: PatchSet
              patchSetName: "deletionPolicy"
            - type: FromCompositeFieldPath
              fromFieldPath: "status.env.eksCidrIp"
              toFieldPath: "spec.forProvider.ingress[0].ipRanges[0].cidrIp"
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: "status.env.awsRegion"
              toFieldPath: "spec.forProvider.region"
            - type: FromCompositeFieldPath
              fromFieldPath: "spec.vpcId"
              toFieldPath: "spec.forProvider.vpcId"
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: "metadata.name"
              toFieldPath: "spec.forProvider.groupName"
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s-sg-efs"
            - type: ToCompositeFieldPath
              fromFieldPath: "metadata.name"
              toFieldPath: "status.securityGroupName"

        - name: k8s-storageclass-secret
          base:
            apiVersion: kubernetes.crossplane.io/v1alpha1
            kind: Object
            metadata:
              labels:
                crossplane/xrd-kind: xtenantfilesystem.wadtfy.bmwgroup.net
                crossplane/xrd-helm_chart_version: {{ .Chart.Version }}
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: v1
                  kind: Secret
                  metadata:
                    name:
                    namespace:
                  type: Opaque
                  data:
                    awsRoleArn: ""
              providerConfigRef:
                name: ""
          patches:
            - type: PatchSet
              patchSetName: "deletionPolicy"
            - type: PatchSet
              patchSetName: "providerConfigKubernetes"
            - type: CombineFromComposite
              combine:
                variables:
                  - fromFieldPath: "status.env.product"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-name]"
                strategy: string
                string:
                  fmt: "efs-s-%s-%s-%s-secret"
              toFieldPath: "spec.forProvider.manifest.metadata.name"
            - type: FromCompositeFieldPath
              fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
              toFieldPath: "spec.forProvider.manifest.metadata.namespace"
            - type: CombineFromComposite
              combine:
                variables:
                  - fromFieldPath: "status.env.awsAccountId"
                  - fromFieldPath: "status.roleName"
                strategy: string
                string:
                  fmt: "arn:aws:iam::%s:role/wadtfy/tenantfilesystem/%s"
              toFieldPath: "spec.forProvider.manifest.data.awsRoleArn"
              transforms:
                - type: string
                  string:
                    type: Convert
                    convert: ToBase64
              policy:
                fromFieldPath: Required
            - type: ToCompositeFieldPath
              fromFieldPath: "spec.forProvider.manifest.metadata.name"
              toFieldPath: "status.storageClassSecret"

        - name: k8s-storageclass
          base:
            apiVersion: kubernetes.crossplane.io/v1alpha1
            kind: Object
            metadata:
              labels:
                crossplane/xrd-kind: xtenantfilesystem.wadtfy.bmwgroup.net
                crossplane/xrd-helm_chart_version: {{ .Chart.Version }}
              # ArgoCD Annotations Tracking for StorageClass, uncomment to enable (see below for patches too)
              # annotations:
              #   argocd.argoproj.io/tracking-id: ""
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: storage.k8s.io/v1
                  kind: StorageClass
                  metadata:
                    name:
                    annotations:
                      wadtfy.bmwgroup.net/restricted-namespaces: ""
                  mountOptions:
                    - tls
                    - iam
                  parameters:
                    az: ""
                    csi.storage.k8s.io/provisioner-secret-name: ""
                    csi.storage.k8s.io/provisioner-secret-namespace: ""
                    directoryPerms: "700"
                    fileSystemId: ""
                    provisioningMode: efs-ap
                    gidRangeStart: "50000"
                    gidRangeEnd: "7000000"
                    basePath: ""
                  provisioner: efs.csi.aws.com
                  reclaimPolicy: Delete
                  volumeBindingMode: Immediate
              providerConfigRef:
                name: ""
          patches:
            - type: PatchSet
              patchSetName: "metadata"
            - type: PatchSet
              patchSetName: "deletionPolicy"
            - type: PatchSet
              patchSetName: "providerConfigKubernetes"
            - type: FromCompositeFieldPath
              fromFieldPath: "spec.storageClass.reclaimPolicy"
              toFieldPath: "spec.forProvider.manifest.reclaimPolicy"
            - type: FromCompositeFieldPath
              fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
              toFieldPath: "spec.forProvider.manifest.metadata.annotations[wadtfy.bmwgroup.net/restricted-namespaces]"
            - type: FromCompositeFieldPath
              fromFieldPath: "status.mounttargetAvailabilityZone"
              toFieldPath: "spec.forProvider.manifest.parameters.az"
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: "status.storageClassSecret"
              toFieldPath: "spec.forProvider.manifest.parameters[csi.storage.k8s.io/provisioner-secret-name]"
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
              toFieldPath: "spec.forProvider.manifest.parameters[csi.storage.k8s.io/provisioner-secret-namespace]"
            - type: FromCompositeFieldPath
              fromFieldPath: "status.fileSystemID"
              toFieldPath: "spec.forProvider.manifest.parameters.fileSystemId"
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: "spec.storageClass.uid"
              toFieldPath: "spec.forProvider.manifest.parameters.uid"
            - type: FromCompositeFieldPath
              fromFieldPath: "spec.storageClass.gid"
              toFieldPath: "spec.forProvider.manifest.parameters.gid"
            - type: FromCompositeFieldPath
              fromFieldPath: "spec.storageClass.gidRangeStart"
              toFieldPath: "spec.forProvider.manifest.parameters.gidRangeStart"
            - type: FromCompositeFieldPath
              fromFieldPath: "spec.storageClass.gidRangeEnd"
              toFieldPath: "spec.forProvider.manifest.parameters.gidRangeEnd"
            - type: FromCompositeFieldPath
              fromFieldPath: "spec.storageClass.basePath"
              toFieldPath: "spec.forProvider.manifest.parameters.basePath"
            - type: ToCompositeFieldPath
              fromFieldPath: "metadata.name"
              toFieldPath: "status.storageClassName"
            # ArgoCD Annotations Tracking for StorageClass, uncomment to enable
            # - type: CombineFromComposite
            #   combine:
            #     variables:
            #       - fromFieldPath: "spec.argocdAppName"
            #       - fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
            #       - fromFieldPath: "metadata.name"
            #     strategy: string
            #     string:
            #       fmt: "%s:storage.k8s.io/StorageClass:%s/%s"
            #   toFieldPath: "spec.forProvider.manifest.metadata.annotations[argocd.argoproj.io/tracking-id]"

        - name: k8s-role
          base:
            apiVersion: kubernetes.crossplane.io/v1alpha1
            kind: Object
            metadata:
              labels:
                crossplane/xrd-kind: xtenantfilesystem.wadtfy.bmwgroup.net
                crossplane/xrd-helm_chart_version: {{ .Chart.Version }}
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: rbac.authorization.k8s.io/v1
                  kind: Role
                  metadata:
                    name:
                    namespace:
                  rules:
                    - apiGroups:
                        - ""
                      resources:
                        - secrets
                      verbs:
                        - get
                        - list
              providerConfigRef:
                name: ""
          patches:
            - type: PatchSet
              patchSetName: "deletionPolicy"
            - type: PatchSet
              patchSetName: "providerConfigKubernetes"
            - type: CombineFromComposite
              combine:
                variables:
                  - fromFieldPath: "status.env.product"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-name]"
                strategy: string
                string:
                  fmt: "efs-r-%s-%s-%s"
              toFieldPath: "spec.forProvider.manifest.metadata.name"
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
              toFieldPath: "spec.forProvider.manifest.metadata.namespace"
            - type: ToCompositeFieldPath
              fromFieldPath: "spec.forProvider.manifest.metadata.name"
              toFieldPath: "status.rbacRoleName"
              policy:
                fromFieldPath: Required

        - name: k8s-role-binding
          base:
            apiVersion: kubernetes.crossplane.io/v1alpha1
            kind: Object
            metadata:
              labels:
                crossplane/xrd-kind: xtenantfilesystem.wadtfy.bmwgroup.net
                crossplane/xrd-helm_chart_version: {{ .Chart.Version }}
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: rbac.authorization.k8s.io/v1
                  kind: RoleBinding
                  metadata:
                    name:
                    namespace:
                  roleRef:
                    apiGroup: rbac.authorization.k8s.io
                    kind: Role
                    name:
                  subjects:
                    - kind: ServiceAccount
                      name: kube-system-sa
                      namespace: kube-system
              providerConfigRef:
                name: ""
          patches:
            - type: PatchSet
              patchSetName: "deletionPolicy"
            - type: PatchSet
              patchSetName: "providerConfigKubernetes"
            - type: CombineFromComposite
              combine:
                variables:
                  - fromFieldPath: "status.env.product"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-name]"
                strategy: string
                string:
                  fmt: "efs-rb-%s-%s-%s"
              toFieldPath: "spec.forProvider.manifest.metadata.name"
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
              toFieldPath: "spec.forProvider.manifest.metadata.namespace"
            - type: FromCompositeFieldPath
              fromFieldPath: "status.rbacRoleName"
              toFieldPath: "spec.forProvider.manifest.roleRef.name"
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: "status.env.eksCsiDriverServiceAccount"
              toFieldPath: "spec.forProvider.manifest.subjects[0].name"

        - name: usage-kmskey-elasticfilesystem
          base:
            apiVersion: apiextensions.crossplane.io/v1alpha1
            kind: Usage
            metadata:
              name: ""
            spec:
              reason: "elasticfilesystem needs kmskey"
              of:
                apiVersion: "kms.aws.crossplane.io/v1alpha1"
                kind: Key
                resourceRef:
                  name: ""
              by:
                apiVersion: "efs.aws.crossplane.io/v1alpha1"
                kind: FileSystem
                resourceRef:
                  name: ""
          patches:
            - type: CombineFromComposite
              combine:
                variables:
                  - fromFieldPath: "status.env.product"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-name]"
                strategy: string
                string:
                  fmt: "usage-efs-kms-%s-%s-%s"
              toFieldPath: "metadata.name"
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: status.kmsKeyRefName
              toFieldPath: spec.of.resourceRef.name
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: status.fileSystemRef
              toFieldPath: spec.by.resourceRef.name
              policy:
                fromFieldPath: Required

        - name: usage-elasticfilesystem-storageclass
          base:
            apiVersion: apiextensions.crossplane.io/v1alpha1
            kind: Usage
            metadata:
              name: ""
            spec:
              reason: "storageclass needs elasticfilesystem"
              of:
                apiVersion: "efs.aws.crossplane.io/v1alpha1"
                kind: FileSystem
                resourceRef:
                  name: ""
              by:
                apiVersion: "storage.k8s.io/v1"
                kind: StorageClass
                resourceRef:
                  name: ""
          patches:
            - type: CombineFromComposite
              combine:
                variables:
                  - fromFieldPath: "status.env.product"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-name]"
                strategy: string
                string:
                  fmt: "usage-sc-efs-%s-%s-%s"
              toFieldPath: "metadata.name"
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: status.fileSystemRef
              toFieldPath: spec.of.resourceRef.name
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: status.storageClassName
              toFieldPath: spec.by.resourceRef.name
              policy:
                fromFieldPath: Required

        - name: usage-securitygroup-elasticfilesystem
          base:
            apiVersion: apiextensions.crossplane.io/v1alpha1
            kind: Usage
            metadata:
              name: ""
            spec:
              reason: "elasticfilesystem needs securitygroup"
              of:
                apiVersion: "ec2.aws.crossplane.io/v1beta1"
                kind: SecurityGroup
                resourceRef:
                  name: ""
              by:
                apiVersion: "efs.aws.crossplane.io/v1alpha1"
                kind: FileSystem
                resourceRef:
                  name: ""
          patches:
            - type: CombineFromComposite
              combine:
                variables:
                  - fromFieldPath: "status.env.product"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-name]"
                strategy: string
                string:
                  fmt: "usage-efs-sg-%s-%s-%s"
              toFieldPath: "metadata.name"
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: status.securityGroupName
              toFieldPath: spec.of.resourceRef.name
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: status.fileSystemRef
              toFieldPath: spec.by.resourceRef.name
              policy:
                fromFieldPath: Required

        - name: usage-iamrole-elasticfilesystem
          base:
            apiVersion: apiextensions.crossplane.io/v1alpha1
            kind: Usage
            metadata:
              name: ""
            spec:
              reason: "elasticfilesystem needs iamrole"
              of:
                apiVersion: "iam.aws.crossplane.io/v1beta1"
                kind: Role
                resourceRef:
                  name: ""
              by:
                apiVersion: "efs.aws.crossplane.io/v1alpha1"
                kind: FileSystem
                resourceRef:
                  name: ""
          patches:
            - type: CombineFromComposite
              combine:
                variables:
                  - fromFieldPath: "status.env.product"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-name]"
                strategy: string
                string:
                  fmt: "usage-iamrole-efs-%s-%s-%s"
              toFieldPath: "metadata.name"
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: status.roleName
              toFieldPath: spec.of.resourceRef.name
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: status.fileSystemRef
              toFieldPath: spec.by.resourceRef.name
              policy:
                fromFieldPath: Required

        - name: usage-policy-elasticfilesystem
          base:
            apiVersion: apiextensions.crossplane.io/v1alpha1
            kind: Usage
            metadata:
              name: ""
            spec:
              reason: "elasticfilesystem needs policy"
              of:
                apiVersion: "iam.aws.crossplane.io/v1beta1"
                kind: Policy
                resourceRef:
                  name: ""
              by:
                apiVersion: "efs.aws.crossplane.io/v1alpha1"
                kind: FileSystem
                resourceRef:
                  name: ""
          patches:
            - type: CombineFromComposite
              combine:
                variables:
                  - fromFieldPath: "status.env.product"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-namespace]"
                  - fromFieldPath: "metadata.labels[crossplane.io/claim-name]"
                strategy: string
                string:
                  fmt: "usage-policy-efs-%s-%s-%s"
              toFieldPath: "metadata.name"
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: status.policyName
              toFieldPath: spec.of.resourceRef.name
              policy:
                fromFieldPath: Required
            - type: FromCompositeFieldPath
              fromFieldPath: status.fileSystemRef
              toFieldPath: spec.by.resourceRef.name
              policy:
                fromFieldPath: Required

  # You need $. Variable definition cause of the loop !!!
  - step: MountTargets
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
{{- `
          {{- $index := 0 }}
          {{- range $subnetId := .observed.composite.resource.spec.subnetIds }}
          ---
          apiVersion: efs.aws.crossplane.io/v1alpha1
          kind: MountTarget
          metadata:
            name: {{ printf "%s-%s-%s-mt-%d" ( index $.context "apiextensions.crossplane.io/environment" "product" ) (index $.observed.composite.resource.metadata.labels "crossplane.io/claim-namespace")  (index $.observed.composite.resource.metadata.labels "crossplane.io/claim-name") $index }}
            annotations:
              {{ setResourceNameAnnotation (print "mounttarget" $index) }}
            labels:
              crossplane/xrd-kind: xtenantfilesystem.wadtfy.bmwgroup.net
              crossplane/xrd-helm_chart_version: `}} {{ .Chart.Version }} {{- `
          spec:
            forProvider:
              fileSystemIDRef:
                name: {{ $.observed.composite.resource.status.fileSystemRef }}
              region: {{ index $.context "apiextensions.crossplane.io/environment" "awsRegion" }}
              securityGroupsRefs:
                - name: {{ $.observed.composite.resource.status.securityGroupName }}
              subnetID: {{ $subnetId }}
            providerConfigRef:
              name: {{ index $.context "apiextensions.crossplane.io/environment" "providerConfig" }}

            {{- $index = add $index 1 }}
          {{- end }}

          {{- if (get $.observed.resources.mounttarget0.resource.status.atProvider "availabilityZoneName") }}
            {{- $AvailabilityZone := get $.observed.resources.mounttarget0.resource.status.atProvider "availabilityZoneName" }}
          ---
          apiVersion: {{ $.observed.composite.resource.apiVersion }}
          kind: {{ $.observed.composite.resource.kind }}
          status:
            mounttargetAvailabilityZone: {{ $AvailabilityZone }}
          {{- end }}
`}}

  - step: automatically-detect-ready-composed-resources
    functionRef:
      name: function-auto-ready
